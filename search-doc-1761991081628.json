{"searchDocs":[{"title":"Partnership Agreement","type":0,"sectionRef":"#","url":"/nr-architecture-patterns-library/docs/Agile Team Kickstarter","content":"This page has been replicated to a publicly accessible website located here Status GreenPublished Overview The purpose of this page is to outline some of the key information and connections that product teams should be made aware of as part of team inception. This is a living and collaborative document. Teams can use this page a reference point to assist in locating some key areas of information related to their application. If the information you are using does not exist here please review other guideline pages and/or contact the architecture team. Partnership Agreement NRM teams that work within our Development and Digital Services (DDS) branch start with a partnership agreement to ensure alignment between NRIDS and the program area. NRM Digital Service Delivery Partnership Agreement Team Agreement Before starting development, or when new team members begin contributing, ensure everyone on the team has the same understanding about coding practices, technology choices, and roles within your team. This is typically done during sprint 0. Coding Patterns and Practices Development Standards Familiarize yourself with the. These are requirements of all NRM applications. Data Guides, Standards and Resources Data is the enduring asset as part of any digital service in Government. Below are some recommended resources to get teams familiar with the data ecosystem within BC Government: Open Data Policy increases government transparency and accountability through the public release of information, including data. BC Data Catalogue is a resource for discovering thousands of datasets from across Government, and in some cases gaining access to the services themselves. Core Metadata Standard defines the metadata elements that help make digital information easier to find, to improve services, and increase government's efficiency Gender and Sex Data Standard improves how government collects and uses data to serve B.C.'s diverse population. Indigenous Languages Technology Standard: the BC Government is committed to including Indigenous languages in government records, systems and services. The BC Sans font is an open-source &quot;living&quot; typeface developed for government to improve the readability and delivery of digital services. It was designed to support special characters and syllabics found in Indigenous Languages in B.C. When designing and building your product, ensure it has the ability to collect, store, manage and display BC Sans characters. Connect with your architects for more details and references. Working with Data is a developer focused guide around developing data solutions within BC Government. Product Lifecycle Is your team replacing, re-architecting or re-platforming an existing application? If so, it's the Product Owner's responsibility to ensure the existing application is retired and the data is transitioned or preserved to ensure data quality, accuracy and currency as well as overall portfolio sustainability. Product Owners may reach out to their assigned Ministry Portfolio Manager (MPM) for assistance with the Application Retirement process. Ensure you allocate time and budget in your backlog to manage the overall lifecycle of the business processes, data and associated products. Helpful links on Application Retirement: Private Cloud The BC Government has invested heavily in the Red Hat OpenShift platform to provide self service private cloud capabilities. Training is available through the exchange lab to get teams acquainted with the platform; a good primer is here. https://developer.gov.bc.ca/ExchangeLab-Course:-OpenShift-101 The landing page for the private cloud service is here: https://cloud.gov.bc.ca/private-cloud/ Namespace provisioning can be found here: https://registry.developer.gov.bc.ca/public-landing Information on resource tuning for OpenShift Namespaces can be found here: https://beta-docs.developer.gov.bc.ca/application-resource-tuning/ The RedHat learning portal is a great resource to learn more about the platform, and they also provide a sandbox to 'learn by doing'. Some of the more important concepts to understand up front are: Image streams, builds &amp; taggingNetwork policy settings to allow pods to communicate internally and to the web via routes,How to get deployments to listen to tags and/or configuration changes (eventually on repo events like pull requests)Tuning, health checks, resource allocation and tuning, and pod scaling OpenShift QuickStart Application Our friends and collaborators in Forestry Digital Services and the Architecture team have created an application template that includes pluggable API backends (Node/Nest, Python/FastAPI, Go/Fiber, Java/Quarkus) and frontend (React, Vite), with a deployment pipeline to the OpenShift platform with an option to include a PostgreSQL/PostGIS database and leveraging the backup container provided by the BC DevExchange. This is a great resource to get product teams up and running. QuickStart OpenShift QuickStart OpenShift Emerald Public Cloud BC Government has endorsed several public cloud services and provides quickstart guides and sample applications! https://www2.gov.bc.ca/gov/content/governments/services-for-government/cloud-computing-in-the-bc-government#explore Approved AWS services can be found here: https://developer.gov.bc.ca/AWS-Services GitHub Source code should be stored in a GitHub repository in the &quot;bcgov&quot; tenancy. Access management for the bcgov GitHub tenancy can be found here: https://just-ask.developer.gov.bc.ca/ NRM specific guidance on Github is here: Source Code Repositories Authentication and Identity Most NRM digital products leverage the OCIO SSO service that is backed by Keycloak. https://bcgov.github.io/sso-requests https://oidc.gov.bc.ca/auth/ Secrets Management The platform services team operates a Vault service. It is described here: https://beta-docs.developer.gov.bc.ca/vault-secrets-management-service/ Access to the service is here: https://vault.developer.gov.bc.ca/ui/vault/auth?with=token Security and Privacy It's important that teams engage with the NRM Security and Privacy teams early and often. They can support you with general advice as well as Security Threat Risk Assessments (STRA's) and Privacy Impact Assessments (PIA's). NRM Security Knowledge Base: NRM Information Security Home NRM Privacy Knowledge Base: NRM Privacy Knowledge Base OWASP (Open Web Application Security Project) is another great reference for security best practices for development teams: https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/migrated_content CI/CD The deployment pipeline is a key component for your application. For visibility, collaboration and maintainability modern teams are moving away from Jenkins towards GitHub actions. It is strongly recommended that code be submitted using a Pull Request. Automated testing can and should replace manual UAT wherever practical. NRM has a modern CI/CD template using GitHub Actions and HELM: OpenShift QuickStart targeted for OpenShift Silver or Gold Cluster. NRM has a modern CI/CD template using GitHub Actions, HELM and Argo: OpenShift QuickStart Emerald targeted for OpenShift Emerald Cluster. Application Programming Interfaces (API's) We recommend adopting an &quot;API First&quot; philosophy for application development, where teams both build and consume their API's. Providing API specification with proper metadata is mandatory irrespective of the underlying implementation(REST, graphql, grpc etc..) Along with API first approach the Architecture team highly recommends looking at Domain Driven Design(DDD) where each micro-service API is bounded by its business domain(https://martinfowler.com/bliki/DomainDrivenDesign.html) Also look at Event-Driven Architecture (Event Sourcing and CQRS) when building micro-services as it promotes highly decoupled APIS, communicating over an event streaming platform (https://microservices.io/patterns/data/event-sourcing.html, https://microservices.io/patterns/data/cqrs.html) We recommend a Test Driven Development (TDD) approach to API development, as it makes the application code more reliable and efficient along with easier maintenance in the future. There are several ways to name test methods/functions but we recommend using the pattern test&lt;method_name&gt;_&lt;given_condition&gt;_&lt;expected_behavior&gt;, it makes the tests more readable, predictable and becomes living documentation of the codebase. BC Government has published a set of API Guidelines here: https://developer.gov.bc.ca/Data-and-APIs/BC-Government-API-Guidelines Information on the corporate API gateway can be found here: https://bcgov.github.io/aps-infra-platform/ Database and Data Design Most of the teams working on OpenShift are choosing a flavor of PostgreSQL to persist data for their application. Some points of consideration are: What type of data are you persisting as part of your application? Are you storing geospatial data? Audio and/or video?What are your preferred integration patterns?Do you have any requirements, for example, to replicate data to the BC Geographic Warehouse (BCGW)?What are the requirements for consistency, availability and partitioning? For NRM guidance specific to data and database design, please visit this space: NRM Data and Database Development Guidelines Database backups can be setup using the backup container image; information can be found here: https://developer.gov.bc.ca/Backup-Container Document Storage BC Government has an on premise object storage solution that delivers low cost storage for unstructured and semi-structured data. The service is billed monthly to the highwatermark of the storage your team consumes in their S3 bucket at $0.07/GB/Month. To get an S3 object storage bucket, contact the Optimize team. COMS (Common Object Management Service) is an emerging common component that leverages the object storage solution. The advantage of this component is that it includes the ability to tag and add metadata, and integrates with BC Government's standard identity providers (IDIR, BCeID). To learn more, attend the Common Services Showcase team sprint reviews or contact the team via email. An emerging companion to the Common Object Management Service being built by the Common Services team is BCBox, which is a hosted solution that uses the COMS API to allow users to upload, tag and share files using any OIDC compliant authentication mechanism. The code repository for BCBox can be found here. Design Guidance General resources for Agile designers at Digital Government (BC Visual Identity, Official BC Design System, Web Style Guide, Content Design Guidance, UX Research Guidance, Service Design Playbook) can be found here: https://digital.gov.bc.ca/resources#:~:text=Read%20the%20playbook-,For%20Designers,-B.C.%20Visual Additional design system guidance: https://developer.gov.bc.ca/Design-System/About-the-Design-System BC Parks has extended their Design Guide to include the use of the BC Sans font and other additions specific to their program: https://bcgov.github.io/bcparks/design-guides Front End Frameworks Many agile teams are using a flavor of Javascript framework for their front end development (Angular, Vue, React etc). We recommend you pick the framework that works best for the team, and if you are developing a suite of applications for your program area, harmonize across the suite where that makes sense. This will minimize risk associated with changes to the team and enable other developers to work with your code. Web Mapping Frameworks A comparison of web mapping frameworks in use in BC Government can found here: https://bcgov.github.io/bcwebmaps-options/ Back End Languages Similar to front end frameworks, we recommend you choose a development language that best suits the team and the business challenge you are working on. If you are developing a suite of applications for your program area, harmonize across the suite where that makes sense. This will minimize risk associated with changes to the team and enable other developers to work with your code. There are many languages in use by agile teams across government, the most popular being Go, Python, Java, Javascript and Typescript. The Technology Radar is a great reference to see where the momentum is around languages and frameworks. Web Domains and Certificates Information on NRM Web Domains can be found here: Web-Application domains An example of a public facing URL is https://fom.nrs.gov.bc.ca/public/projects Information on how to obtain an SSL certificate can be found here: Automation of TLS Certificates for Websites Further information on security certificates can be found here: Security Certificates Information on certbot can be found here: https://github.com/BCDevOps/certbot Common Components BC Government has a selection of mature common components and common services. Digital Government reference: https://digital.gov.bc.ca/common-components NRM Specific Guidance: Common Components and Common Services Community Tip! If you are looking for a common component you think should exist, but doesn't, consider adding some extra design thinking such that other teams can reuse your great work!​ Reporting and Analytics Many teams require reporting and analytics capabilities for their application data. Metabase is an easy-to-use open-source dashboarding and business intelligence tool that has broad usage in the NRM. Architecture has created a packaged install of Metabase tailored to teams wanting secure access to Zone B Oracle databases. Metabase I need help from the Community! There are many teams working across the NRM and beyond. To connect with your NRM colleagues, see the team directory here NRIDS Development and Digital Services The community uses Rocket.Chat to solicit help from other teams on all sorts of subjects. Users can authenticate with IDIR or their GitHub ID. https://chat.developer.gov.bc.ca/ Channels of interest might include #general #devops-alerts #devops-operations #nr-iitd-agile-teams and any channel prefixed with &quot;#nr-&quot; The NRM teams have a DevOps Guild to facilitate connections and collaboration between teams: https://apps.nrs.gov.bc.ca/int/confluence/display/DEVGUILD You can also reach out to the NRM Architecture team, who can help connect your team with the right resources. Key References: BC DevHub: https://developer.gov.bc.ca, https://docs.developer.gov.bc.ca/ Common Components: https://digital.gov.bc.ca/common-components Communities of Practice: https://digital.gov.bc.ca/communities BC Gov StackOverflow: https://stackoverflow.developer.gov.bc.ca/ FAQ Q. Do I need my application and data architecture to be formally approved? A. No, there is no formal approval process for your architecture. We recommend collaborating with the architecture team during any architectural spikes or any significant architectural decisions. Our collective experience and connectedness across the community can typically provide value for the team. Q. Do I have to use OpenShift to host my application? A. No. We would generally like new applications to be running in a containerized or serverless hosting architecture. OpenShift is a strong option for teams starting out given the maturity of the platform and the surrounding community, as is the AWS Public Cloud Service, both operated by BC Government teams. Following cloud native design principles will help ensure that your application workload is portable between hosting platforms. Q. Can I pass my application off to an ops team so the team can work on new apps? A. We generally follow the &quot;you build it, you run it&quot; philosophy, and therefore recommend you build a sustainment plan into your application roadmap. Adhering as closely as possible to the 12 Factor principles is a great way to promote a sustainable, cloud native build.","keywords":"","version":"Next"},{"title":"Approved Hosting Options","type":0,"sectionRef":"#","url":"/nr-architecture-patterns-library/docs/Application Hosting Options","content":"","keywords":"","version":"Next"},{"title":"On-Premise​","type":1,"pageTitle":"Approved Hosting Options","url":"/nr-architecture-patterns-library/docs/Application Hosting Options#on-premise","content":" Overview: Running an application on-premise referred to a typical server (VM) hosted through OCIO and managed by the NRIDS Infrastructure Team for general server management.  Please not the below is not a representation about a specific application but a representation of what an on-premise application could be.  trueOnPremfalse400autotoptrue16563  Pros\tCons Network access to government services and applications within SPAN In general, firewall rules will be the only blocker but can be mitigated in general via a firewall change request; Difficult to deploy Must use Jenkins or manual deploymentsNo native connectivity to connect with github actionslocked into relying on the RFD / RFC team and their deployment structure Network access from government services and applications within SPAN In general, firewall rules will be the only blocker but can be changes via a firewall change request; Note this can be useful when another systems require access to your applications data Limited control over servers By default a team does not have full control of their serversSecurity patches are managed external to a team Access to system databases Applications that do not have internal or external accessible APIs are still accessible via direct database connections; Note this can be useful for integrations with systems that are not under active development or do not have capabilities to develop APIs Limited Tech Stack Currently, it is limited to Java/Oracle mainly within ISSS stack with BitBucket as the source code repository. Access to internal APIs Applications that do not have external accessible APIs are still accessible via internal APIs Limited Scalability Currently, all applications run as a single process without any resiliency or failover.  When this might fit?  Many integration points with government systems that are not externally accessible.COTS applications that either won't run on Openshift and do not have a cloud based SaaS subscription service.  When this might not fit?  Team requires full control over the deployment, patches, and maintenance of applications and associated servers.Team requiring separate tech stack(frontend, backend, database, messaging ...)  ","version":"Next","tagName":"h2"},{"title":"Openshift​","type":1,"pageTitle":"Approved Hosting Options","url":"/nr-architecture-patterns-library/docs/Application Hosting Options#openshift","content":" Overview: Running an application in Openshift (Silver/Gold/Emerald) with the platform managed by OCIO  Please note the below is not a representation about a specific application but a representation of what could be.  Pros\tCons Control over deployment, patches, updates, Can work with GitHub and GitHub actions; Note this is not platform/cluster updates. Platform updates are still done by OCIO but if your application is configured as Highly-available with appropriate state management this should not affect your application Database stability Running a single pod can cause your database to go down without notice in a production environmentLimited or no DBA support; the development team is ultimately responsible for database management and backup/recovery Supporting GitHub Open Source Codebase leading to Easier Collaboration and following defacto standard. Database cluster complexity Since production databases must operate in a cluster, additional expertise is needed to operate a cluster   When this might fit?  Deployment of containerized web applications with limited Database requirementsYour product is comprised of open source technologies  When this might not fit?  Low developer expertiseYour product has an embedded PCI/payment solution  Note: For direct DB access to ZoneB databases Or Storing Protected C data, emerald cluster may be required  ","version":"Next","tagName":"h2"},{"title":"AWS & Azure​","type":1,"pageTitle":"Approved Hosting Options","url":"/nr-architecture-patterns-library/docs/Application Hosting Options#aws--azure","content":" Overview: Running an application in BCGOV AWS tenancy owned by OCIO  Please note the below is not a representation about a specific application but a representation of what could be.  trueAWSfalse600autotoptrue34981  Pros\tCons Scalability of resources Provides the ability to increase resources (for a cost) Steep learning curve Operating in AWS requires extensive knowledge of the platform and infrastructure as well as supporting technologies (eg. Terraform) Reduced IT management overhead Platform, infrastructure, security overhead are handled by AWS Limited use for Data Types Not fit for Protected C data Access to a breadth of services not available on premise https://digital.gov.bc.ca/cloud/public/providers/service-catalogue/ Little or no cost certainty Most components in AWS are billed based on usage; network egress (leaving AWS) is also charged based on data volumes  When this might fit?  Your applications require a volume of resources not available on-premise with large fluctuations in demandYou require tools and services not available on premise or in Openshift  When this might not fit?  Many integration points with government systems are not externally accessible; Note: this may not be a blocker in the future due to a cloud networking interface being implemented by OCIO that is intended to allow network access between SPANBC and our AWS tenancy, however, it is not known the impacts or efforts for teams to implement  ","version":"Next","tagName":"h2"},{"title":"SaaS​","type":1,"pageTitle":"Approved Hosting Options","url":"/nr-architecture-patterns-library/docs/Application Hosting Options#saas","content":" Overview: A vendor run and managed application hosted outside government networks provided as a &quot;service&quot;  Please not the below is not a representation about a specific application but a representation of what could be.  Red Line: Firewall  Blue Line: SPAN network boarder  trueSaaSfalse400autotoptrue26291  Pros\tCons Less responsibility to maintain A vendor is responsible to maintain infrastructure and application; Note SLAs. contracts, and licenses are required Vendor Managed Infrastructure or application issues will generally be up to the vendor to resolveChanges, bugs, enhancements are likely to be done only by a vendor unless additional training is provided Vendor and Product lock in Full implement SaaS products generally requires substantial effort to migrate to other platformsData is locked in with the vendor. Limited use for Data Types Not fit for Protected C data Difficult to meet requirements of the Cloud Security Schedule and Cloud Privacy Schedule Each SaaS vendor AND the underlying service provider must be evaluated  When this might fit?  Little to no resources to run and manage your applicationLittle to no integration points with government systems that are not externally accessible.  When this might not fit?  Many integration points with government systems that are not externally accessible.  Not Approved Hosting Options  ","version":"Next","tagName":"h2"},{"title":"GCP​","type":1,"pageTitle":"Approved Hosting Options","url":"/nr-architecture-patterns-library/docs/Application Hosting Options#gcp","content":" Note: Google (GCP) is not mentioned as it is not recommended for use.  GCP has centralized cost recovery and billing.GCP has no landing zone to ensure applications are developed using minimum best practices (this is not on the roadmap yet). It will be up to teams and the ministry to accept the risk and ensure their applications are following best practices.GCP has no overarching PIA/STRA so it will up to the team to include platform specifics within their PIA/STRA Applications that are not open/public data, will need to include platform specifics to allow the use of protected A or B data. GCP will NOT be part of the Equinix fabric, allowing private routing to ZoneB. However, you can still go over the public internet (eg. API), though be aware some services are not accessible this way.  ","version":"Next","tagName":"h2"},{"title":"Oracle Cloud​","type":1,"pageTitle":"Approved Hosting Options","url":"/nr-architecture-patterns-library/docs/Application Hosting Options#oracle-cloud","content":" At this point oracle cloud is not approved for use in the NRM.  Please reach out to architecture if you have a valid use case you wish to explore ","version":"Next","tagName":"h2"},{"title":"Hosting Options","type":0,"sectionRef":"#","url":"/nr-architecture-patterns-library/docs/Application Hosting Options/AWS","content":"Status YellowDraft Overview This page is intended to provide a recommendation when developing custom applications on AWS Hosting Options When developing a custom application on the AWS Platform, we recommend 1 of 2 baseline architectures. Containers over RDS, or Serverless (lambda) over NoSQL (DynamoDB). For containers over RDS, QSOS has been adapted be deployed on AWS. Note: This is still a work in progress. For serverless, there is currently no quickstart. Note: The same principals apply when using the quickstart, we do not recommend deviating away from the baseline technologies in the repo. Additional Information https://developer.gov.bc.ca/docs/default/component/public-cloud-techdocs/ References https://github.com/bcgov/quickstart-aws-containers","keywords":"","version":"Next"},{"title":"Hosting Options","type":0,"sectionRef":"#","url":"/nr-architecture-patterns-library/docs/Application Hosting Options/AWS - Recommended Architecture","content":"Status YellowDraft Overview This page is intended to provide a recommendation when developing custom applications on AWS Hosting Options When developing a custom application on the AWS Platform, we recommend 1 of 2 baseline architectures. Containers over RDS, or Serverless (lambda) over NoSQL (DynamoDB). For containers over RDS, QSOS has been adapted be deployed on AWS. Note: This is still a work in progress. For serverless, there is currently no quickstart. Note: The same principals apply when using the quickstart, we do not recommend deviating away from the baseline technologies in the repo. References https://github.com/bcgov/quickstart-aws-containers","keywords":"","version":"Next"},{"title":"Hosting Options","type":0,"sectionRef":"#","url":"/nr-architecture-patterns-library/docs/Application Hosting Options/OpenShift","content":"Status YellowDraft Overview This page is intended to provide a recommendation when developing custom applications on OpenShift Hosting Options When developing a custom application on the OpenShift Platform, we always recommend using the quick start OpenShift application (QSOS) . OCIO is currently creating a wizard from the QSOS to provide an easier onboarding experience. https://test.developer.gov.bc.ca/create Private Cloud The BC Government has invested heavily in the Red Hat OpenShift platform to provide self service private cloud capabilities. Training is available through the exchange lab to get teams acquainted with the platform; a good primer ishere. https://digital.gov.bc.ca/technology/cloud/private/support/openshift-101/ The landing page for the private cloud service is here:https://cloud.gov.bc.ca/private-cloud/ Namespace provisioning can be found here:https://registry.developer.gov.bc.ca/public-landing Information on resource tuning for OpenShift Namespaces can be found here:https://beta-docs.developer.gov.bc.ca/application-resource-tuning/ TheRedHat learning portalis a great resource to learn more about the platform, and they also provide a sandbox to 'learn by doing'. Some of the more important concepts to understand up front are: Image streams, builds &amp; taggingNetwork policy settings to allow pods to communicate internally and to the web via routes,How to get deployments to listen to tags and/or configuration changes (eventually on repo events like pull requests)Tuning, health checks, resource allocation and tuning, and pod scaling OpenShift QuickStart Application Our friends and collaborators in Forestry Digital Services and the Architecture team have created an application template that includes pluggable API backends (Node/Nest, Python/FastAPI, Go/Fiber, Java/Quarkus) and frontend (React, Vite), with a deployment pipeline to the OpenShift platform with an option to include a PostgreSQL/PostGIS database and leveraging the backup container provided by the BC DevExchange. This is a great resource to get product teams up and running. QuickStart OpenShift QuickStart OpenShift Emerald OpenShift - Recommended Architecture technologies This repository has the recommend technologies within the repo. In general though we suggest using the below technologies. It is not recommended to deviate from the baseline technologies not in QSOS. frontend - Vue.JS / React.JS backend - Node.JS / Java database - Postgres References https://github.com/bcgov/quickstart-openshift","keywords":"","version":"Next"},{"title":"Hosting Options","type":0,"sectionRef":"#","url":"/nr-architecture-patterns-library/docs/Application Hosting Options/OpenShift - Recommended Architecture","content":"Status YellowDraft Overview This page is intended to provide a recommendation when developing custom applications on OpenShift Hosting Options When developing a custom application on the OpenShift Platform, we always recommend using the quick start OpenShift application (QSOS) . OCIO is currently creating a wizard from the QSOS to provide an easier onboarding experience. https://test.developer.gov.bc.ca/create This repository has the recommend technologies within the repo. In general though we suggest using the below technologies. It is not recommended to deviate from the baseline technologies not in QSOS. frontend - Vue.JS / React.JS backend - Node.JS / Java database - Postgres References https://github.com/bcgov/quickstart-openshift","keywords":"","version":"Next"},{"title":"Hosting Options","type":0,"sectionRef":"#","url":"/nr-architecture-patterns-library/docs/Application Hosting Wayfinding/OpenShift - Recommended Architecture","content":"Status YellowDraft Overview This page is intended to provide a recommendation when developing custom applications on OpenShift Hosting Options When developing a custom application on the OpenShift Platform, we always recommend using the quick start OpenShift application (QSOS) . OCIO is currently creating a wizard from the QSOS to provide an easier onboarding experience. https://test.developer.gov.bc.ca/create This repository has the recommend technologies within the repo. In general though we suggest using the below technologies. It is not recommended to deviate from the baseline technologies not in QSOS. frontend - Vue.JS / React.JS backend - Node.JS / Java database - Postgres References https://github.com/bcgov/quickstart-openshift","keywords":"","version":"Next"},{"title":"Hosting Options","type":0,"sectionRef":"#","url":"/nr-architecture-patterns-library/docs/Application Hosting Wayfinding/AWS - Recommended Architecture","content":"Status YellowDraft Overview This page is intended to provide a recommendation when developing custom applications on AWS Hosting Options When developing a custom application on the AWS Platform, we recommend 1 of 2 baseline architectures. Containers over RDS, or Serverless (lambda) over NoSQL (DynamoDB). For containers over RDS, QSOS has been adapted be deployed on AWS. Note: This is still a work in progress. For serverless, there is currently no quickstart. Note: The same principals apply when using the quickstart, we do not recommend deviating away from the baseline technologies in the repo. References https://github.com/bcgov/quickstart-aws-containers","keywords":"","version":"Next"},{"title":"Removing Sensitive Data from a GitHub Repo, How To#","type":0,"sectionRef":"#","url":"/nr-architecture-patterns-library/docs/GitHub Repository Best Practices","content":"Status GreenPublished Overview The purpose of this page is to outline practices when using GitHub as your source code repository Removing Sensitive Data from a GitHub Repo, How To# https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository Please make sure to follow those instructions carefully, as simply deleting the content will not remove it completely from the repository commit history. Repository Setup It is recommended to have product-based monorepos The below options are found under settings Branch Protection Create at least 1 branch protection rule for your &quot;main&quot; branch that; Forces an approval before merging to your &quot;main&quot; branch An approver should be someone able to understand the code changes and has the authority to approve code changes and pipeline activities associated with a PR Merge (Eg. Data Custodian and Test/Prod deployments) Note: Admins can bypass this Enforces status checks to be passed before merging, this should include; SonarCloud (vulnerability, code coverage)Code scanning (Trivy, Snyk, CodeQL)BuildsDeploymentsRoute verification (up/down, penetration testing) Note: checks need to have been run once to populate the drop-down (Ensure you select your options below when enabling the rule) Ensures branches are up to date before merging Manage Your Administrators Have at least 1 backup administratorHave as few admins as possible, most developers will not need to be an admin Manage Your Team Create a Team in GitHub and Manage the permission in the team. (https://github.com/orgs/bcgov/teams)This way if the single team is working on multiple products, authorization will be easier to manage and tracking will be easier.All team names shall be prefixed by nr- .Team names shall be suffixed by -devops if it is designed to be administrative in nature. This should only contain Product Owners/Mangers, Devops Specialists and Technical Leads .All team names shall be lowercase, and use dashes for spacing (do not use spaces or underscores, or other non-ASCII characters)Team name descriptors should attempt to preserve hierarchical team specificity where relevant.GitHub teams does not have to be nested into other existing GitHub teams; they should depend on naming convention and be top level .Team name acronyms should match formal team names where possible. Manage Your Code Owners Add a CODEOWNERS file under the /.github directoryAdd this rule to your main branch protection to ensure PRs are reviewed by code owner Setup Your Pull Request Repository Settings (Very Useful to Help Ensure Guidelines are Followed) Use squash merging to keep histories clean We recommend using pull request titles Suggest updating pull requests Being up to date is required (see above)Selecting this will add an easy update button to PRs Automatically delete head branches, which are merged feature branches Excessive numbers of branches can degrade performance and increase clone timesLong lived-branches are strongly discouraged For additional PR, Pipeline, and Deployment practices: See Create Repository Documentation Create a meaningful Readme.md, see https://github.com/bcgov/BC-Policy-Framework-For-GitHub/blob/master/BC-Gov-Org-HowTo/SAMPLE-README.mdAdd a license and other required documentation, see https://docs.developer.gov.bc.ca/required-pages-for-github-repository/Make use of the GitHub Wiki The GitHub Wiki provides version controlled documentation that multiple people can edit and does not require technical expertiseIf you're going to use the Wiki make sure you add a reference to it in your Readme.md Create a reference in confluence to your repository and documentation GitHub Wiki - Suggestions of What to Add Points of ContactHow-To's: Running LocallyDeveloper PracticesCoding PracticesTicket managementBackup and restore Application process flows Handle Your Secrets and Environment Variables See","keywords":"","version":"Next"},{"title":"Approved Hosting Options","type":0,"sectionRef":"#","url":"/nr-architecture-patterns-library/docs/Application Hosting Wayfinding","content":"","keywords":"","version":"Next"},{"title":"On-Premise​","type":1,"pageTitle":"Approved Hosting Options","url":"/nr-architecture-patterns-library/docs/Application Hosting Wayfinding#on-premise","content":" Overview: Running an application on-premise referred to a typical server (VM) hosted through OCIO and managed by the NRIDS Infrastructure Team for general server management.  Please not the below is not a representation about a specific application but a representation of what an on-premise application could be.  trueOnPremfalse400autotoptrue16563  Pros\tCons Network access to government services and applications within SPAN In general, firewall rules will be the only blocker but can be mitigated in general via a firewall change request; Difficult to deploy Must use Jenkins or manual deploymentsNo native connectivity to connect with github actionslocked into relying on the RFD / RFC team and their deployment structure Network access from government services and applications within SPAN In general, firewall rules will be the only blocker but can be changes via a firewall change request; Note this can be useful when another systems require access to your applications data Limited control over servers By default a team does not have full control of their serversSecurity patches are managed external to a team Access to system databases Applications that do not have internal or external accessible APIs are still accessible via direct database connections; Note this can be useful for integrations with systems that are not under active development or do not have capabilities to develop APIs Limited Tech Stack Currently, it is limited to Java/Oracle mainly within ISSS stack with BitBucket as the source code repository. Access to internal APIs Applications that do not have external accessible APIs are still accessible via internal APIs Limited Scalability Currently, all applications run as a single process without any resiliency or failover.  When this might fit?  Many integration points with government systems that are not externally accessible.COTS applications that either won't run on Openshift and do not have a cloud based SaaS subscription service.  When this might not fit?  Team requires full control over the deployment, patches, and maintenance of applications and associated servers.Team requiring separate tech stack(frontend, backend, database, messaging ...)  ","version":"Next","tagName":"h2"},{"title":"Openshift​","type":1,"pageTitle":"Approved Hosting Options","url":"/nr-architecture-patterns-library/docs/Application Hosting Wayfinding#openshift","content":" Overview: Running an application in Openshift (Silver/Gold/Emerald) with the platform managed by OCIO  Please note the below is not a representation about a specific application but a representation of what could be.  Pros\tCons Control over deployment, patches, updates, Can work with GitHub and GitHub actions; Note this is not platform/cluster updates. Platform updates are still done by OCIO but if your application is configured as Highly-available with appropriate state management this should not affect your application Database stability Running a single pod can cause your database to go down without notice in a production environmentLimited or no DBA support; the development team is ultimately responsible for database management and backup/recovery Supporting GitHub Open Source Codebase leading to Easier Collaboration and following defacto standard. Database cluster complexity Since production databases must operate in a cluster, additional expertise is needed to operate a cluster   When this might fit?  Deployment of containerized web applications with limited Database requirementsYour product is comprised of open source technologies  When this might not fit?  Low developer expertiseYour product has an embedded PCI/payment solution  Note: For direct DB access to ZoneB databases Or Storing Protected C data, emerald cluster may be required  ","version":"Next","tagName":"h2"},{"title":"AWS & Azure​","type":1,"pageTitle":"Approved Hosting Options","url":"/nr-architecture-patterns-library/docs/Application Hosting Wayfinding#aws--azure","content":" Overview: Running an application in BCGOV AWS tenancy owned by OCIO  Please note the below is not a representation about a specific application but a representation of what could be.  trueAWSfalse600autotoptrue34981  Pros\tCons Scalability of resources Provides the ability to increase resources (for a cost) Steep learning curve Operating in AWS requires extensive knowledge of the platform and infrastructure as well as supporting technologies (eg. Terraform) Reduced IT management overhead Platform, infrastructure, security overhead are handled by AWS Limited use for Data Types Not fit for Protected C data Access to a breadth of services not available on premise https://digital.gov.bc.ca/cloud/public/providers/service-catalogue/ Little or no cost certainty Most components in AWS are billed based on usage; network egress (leaving AWS) is also charged based on data volumes  When this might fit?  Your applications require a volume of resources not available on-premise with large fluctuations in demandYou require tools and services not available on premise or in Openshift  When this might not fit?  Many integration points with government systems are not externally accessible; Note: this may not be a blocker in the future due to a cloud networking interface being implemented by OCIO that is intended to allow network access between SPANBC and our AWS tenancy, however, it is not known the impacts or efforts for teams to implement  ","version":"Next","tagName":"h2"},{"title":"SaaS​","type":1,"pageTitle":"Approved Hosting Options","url":"/nr-architecture-patterns-library/docs/Application Hosting Wayfinding#saas","content":" Overview: A vendor run and managed application hosted outside government networks provided as a &quot;service&quot;  Please not the below is not a representation about a specific application but a representation of what could be.  Red Line: Firewall  Blue Line: SPAN network boarder  trueSaaSfalse400autotoptrue26291  Pros\tCons Less responsibility to maintain A vendor is responsible to maintain infrastructure and application; Note SLAs. contracts, and licenses are required Vendor Managed Infrastructure or application issues will generally be up to the vendor to resolveChanges, bugs, enhancements are likely to be done only by a vendor unless additional training is provided Vendor and Product lock in Full implement SaaS products generally requires substantial effort to migrate to other platformsData is locked in with the vendor. Limited use for Data Types Not fit for Protected C data Difficult to meet requirements of the Cloud Security Schedule and Cloud Privacy Schedule Each SaaS vendor AND the underlying service provider must be evaluated  When this might fit?  Little to no resources to run and manage your applicationLittle to no integration points with government systems that are not externally accessible.  When this might not fit?  Many integration points with government systems that are not externally accessible.  Not Approved Hosting Options  ","version":"Next","tagName":"h2"},{"title":"GCP​","type":1,"pageTitle":"Approved Hosting Options","url":"/nr-architecture-patterns-library/docs/Application Hosting Wayfinding#gcp","content":" Note: Google (GCP) is not mentioned as it is not recommended for use.  GCP has centralized cost recovery and billing.GCP has no landing zone to ensure applications are developed using minimum best practices (this is not on the roadmap yet). It will be up to teams and the ministry to accept the risk and ensure their applications are following best practices.GCP has no overarching PIA/STRA so it will up to the team to include platform specifics within their PIA/STRA Applications that are not open/public data, will need to include platform specifics to allow the use of protected A or B data. GCP will NOT be part of the Equinix fabric, allowing private routing to ZoneB. However, you can still go over the public internet (eg. API), though be aware some services are not accessible this way.  ","version":"Next","tagName":"h2"},{"title":"Oracle Cloud​","type":1,"pageTitle":"Approved Hosting Options","url":"/nr-architecture-patterns-library/docs/Application Hosting Wayfinding#oracle-cloud","content":" At this point oracle cloud is not approved for use in the NRM.  Please reach out to architecture if you have a valid use case you wish to explore ","version":"Next","tagName":"h2"},{"title":"Patterns & Guidance","type":0,"sectionRef":"#","url":"/nr-architecture-patterns-library/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Welcome to the Architecture Patterns And Guidance Docs Section.​","type":1,"pageTitle":"Patterns & Guidance","url":"/nr-architecture-patterns-library/docs/intro#welcome-to-the-architecture-patterns-and-guidance-docs-section","content":" ","version":"Next","tagName":"h2"},{"title":"The pattern library is sourced from confluence, some of the links are internal to confluence which is IDIR protected. Sorry 😞.​","type":1,"pageTitle":"Patterns & Guidance","url":"/nr-architecture-patterns-library/docs/intro#the-pattern-library-is-sourced-from-confluence-some-of-the-links-are-internal-to-confluence-which-is-idir-protected-sorry-","content":"","version":"Next","tagName":"h3"},{"title":"Languages Supported","type":0,"sectionRef":"#","url":"/nr-architecture-patterns-library/docs/Coding Patterns & Practices","content":"Status GreenPublished Overview The purpose of this page is to outline some coding practices when developing an application. Practices used by a team should be documented in the repository. Languages Supported Currently, These 4 languages are the supported languages for use within the NRM. (Typescript/JavaScript, Java On Native, Python, R) Note regarding R: R can be a great fit for certain use cases such as statistical analysis, data visualization, data manipulation, and building Shiny apps. R is widely used in academic research and projects that focus on statistical modeling. However, R has limitations when scaling for application development, specifically for use cases when importing additional libraries is required. For application development (outside of shiny) and other use cases we recommend using one of the other support languages. As well Python can generally be a good alternative for those familiar with R. Native Deployments Some Languages are interpreted by their runtime ex:(java on JVM, python, javascript, etc..) whereas some languages are compiled (Golang, Rust). Use native(static binary) deployments wherever available. for ex: it is a MUST for teams using Java to deploy using GraalVM native image without the overhead of JVM interpreter. Focus on the scale-out vs scale-up as deployments are into containers or serverless. Code Design Patterns and Principles Apply SOLID and DRY principles. (https://www.freecodecamp.org/news/solid-principles-explained-in-plain-english, https://www.baeldung.com/cs/dry-software-design-principle)Use Composition over inheritance as much as possible.Use IOC(Inversion of Control) pattern for dependency Injection, following constructor-based injection over setter or field-based injection.The Service Layer should contain all the business logic of the application, and wrap each atomic transaction in the proper transaction boundary, Use transactions for read-only methods as well for ex: GET endpoints. (controller/endpoints → service → repository/active record → entity/query/mutation)The controller should call the service or multiple services inside a transaction boundary to perform the atomic operation.The Service Layer MUST have a transactional context. Use Lazy Loading and Cascading in ORM to avoid fetching child entities unnecessarily and also make sure the mutations are cascaded as well.Follow the TDD approach and the unit tests become living documentation of code, Stub external services with some sort of code, ex in java :- wiremock or powermock, split test lifecycles, so that UTs and Integration Tests can run independently.Follow The Twelve-Factor App standards -https://12factor.net/Use testcontainers(https://www.testcontainers.org/) or GHA services(https://docs.github.com/en/actions/using-containerized-services/about-service-containers) for integration TESTS which includes, databases, queues, cache etc... Folder Structure and Naming Conventions Establish and understand your folder structure, if using a template avoid reorganizing (eg. https://github.com/bcgov/quickstart-openshift)Have a common consistent way when creating names. (eg. for your controllers - The naming of controller APIs should be in line with the pattern of tag definition in swagger - Swagger Tag resource-subresource - URN resource/subresource/pathParameter/subresource) Secret and Environment Variable Handling Exercise the practice of least privilege (eg. Who can and should be able to access secrets)Do not put sensitive information in the code, use a secretUse environment variables when they may not be sensitive but change between environments (eg. Dev, Test, Prod)Do not create secrets manually in Openshift. Secure APIs APIs should always be secured. This is generally achieved by using role based access based off their role validated via JWT.The exception to this would be public APIs. Error Handling Gracefully handle errorsUse plain language when reporting an error. (example. If an error requires a user to do an action they should be able to follow the direction from the error)Avoid generic language (eg. Error, review logs) Code Formatters and Plugins Use common plugins and common formatters across team members to avoid flagging code as changed when it was just the format that was changed. (eg. Prettier, SQL Formatter, ESLint)Share the IDE specific formatter in the GitHub to avoid conflicts Infrastructure as Code Keep in mind what happens when things go wrong, and how we recover. Maintain your infrastructure as code where possible. If it's not possible ensure you have sufficient documentation to stand back up your infrastructure. Pipeline Align your CI/CD pipeline with your hosting environment (GitHub Actions for Openshift Silver/Gold, GitHub Actions with ArgoCD for Openshift Emerald, GiHub Actions with Terraform for AWS) Understand your DevOps pipeline (eg. What happens when I create a PR, merge a PR, how an image gets built, how code get tested)Maintain your pipeline and align if possible to common practice (eg. https://github.com/bcgov/quickstart-openshift) The below was created using the QuickStart OpenShift as a reference. Please refer to the repo for the most up to date information. trueBranching Strategyfalseautotoptrue10111 GitHub PRs - Commits Follow the Conventional Commits for a better understanding -https://www.conventionalcommits.org/en/v1.0.0/ PR Review and Practices PR titles should follow conventional commit (eg. https://www.conventionalcommits.org/en/v1.0.0/).Branches should also follow a similar pattern (eg. feat/$featurename)A single PR should be for a single Feature/bug/hotfix/patch/etc and kept as small as possible and reasonableAdd appropriate labels established by your team. (eg. Adding labels to also indicate the applications being impacted by the PR, for instance, &quot;web&quot; or &quot;API&quot;)Connect the issue using the button &quot;Connect Issue&quot;, if not available install the Chrome ExtensionZenHub for GitHubor similar (this will help trace a completed task to the code modified)If you are the author of the PR avoid resolving the comments, instead reply to them to let the reviewer be aware of your thoughts.If you are a reviewer try to mark the comments as resolved to help the PR author to identify easily what is still missing.Comments and conversations on the PR are good to let everyone be aware of what is happening but a quick call can also save a lot of time.Once a review is raised, a reviewer should do the best effort to try to find a good moment to start. (eg. in the next 3 business hours. It does not mean finishing it in the 3 hours, just try to start providing some feedback. If multiple PRs are open at the same time the delays will be completely acceptable)Review according to best practices for the code and application. PRs are about code review (not people review)Have a merging practice. (eg. Squash the commits before merging to keep the main timeline clean)Clean up your branches (eg. Delete the branch after the merge is done (after mergingdo not reuse the branch)) Dependency Management It is strongly recommended to keep dependencies updated with automated pull requests from tools like Renovate, Snyk or Dependabot.This introduces new features, fix bugs, address vulnerabilities or improve performance, affecting the quality, security, and functionality of a project.Regular dependency pull requests help to keep changes small, up to date and, of course, manageable.These pull requests should not be closed without careful consideration. Unmerged updates should be written into an issue with reasoning and details to follow up in future. API framework evaluation factors The below outlines a fewkeyconsiderations which would help in the decision-making of language/framework to use for API development forcontainerizedenvironments. Details around API Design are outlined here(https://developer.gov.bc.ca/Data-and-APIs/BC-Government-API-Guidelines). The below points are on top of the guidelines provided in the link. Developer friendly, community support and libraries.Resource Consumption(memory/CPU) the less the better, supports the move towards green computing.Automated Open API 3 Specification generation, Swagger UI.Automated DB schema management (flyway/Liquibase or something similar).ORM integration for Database, ACID, Transaction support, Nested Transactions, Advanced Query with pagination, filter, sorting support.Supports TDD(Test Driven Development) out of the box, which supports unit and integration testing.Easiness of testing for pipelines and other automation.Easiness of OAUTH2 integration.Easiness of Circuit breaker integration and Resiliency.API versioning.Support for REST, GraphQL and gRPCAsynchronous REST Client.API Health checks(for liveness/readiness checks in Kubernetes world) out of the box which includes checking DB Connections and Message Broker connection (If present).Easiness of writing to log files in different formats.Switching Between Relational Database should be config only.Easy Concurrency.Easiness of Integration with Distributed tracing frameworks.","keywords":"","version":"Next"},{"title":"Partnership Agreement","type":0,"sectionRef":"#","url":"/nr-architecture-patterns-library/docs/Development Team Kickstarter","content":"This page has been replicated to a publicly accessible website located here Status GreenPublished Overview The purpose of this page is to outline some of the key information and connections that product teams should be made aware of as part of team inception. This is a living and collaborative document. Teams can use this page a reference point to assist in locating some key areas of information related to their application. If the information you are using does not exist here please review other guideline pages and/or contact the architecture team. Partnership Agreement NRM teams that work within our Development and Digital Services (DDS) branch start with a partnership agreement to ensure alignment between NRIDS and the program area. NRM Digital Service Delivery Partnership Agreement Team Agreement Before starting development, or when new team members begin contributing, ensure everyone on the team has the same understanding about coding practices, technology choices, and roles within your team. This is typically done during sprint 0. Coding Patterns and Practices Development Standards Familiarize yourself with the. These are requirements of all NRM applications. Data Guides, Standards and Resources Data is the enduring asset as part of any digital service in Government. Below are some recommended resources to get teams familiar with the data ecosystem within BC Government: Open Data Policy increases government transparency and accountability through the public release of information, including data. BC Data Catalogue is a resource for discovering thousands of datasets from across Government, and in some cases gaining access to the services themselves. Core Metadata Standard defines the metadata elements that help make digital information easier to find, to improve services, and increase government's efficiency Gender and Sex Data Standard improves how government collects and uses data to serve B.C.'s diverse population. Indigenous Languages Technology Standard: the BC Government is committed to including Indigenous languages in government records, systems and services. The BC Sans font is an open-source &quot;living&quot; typeface developed for government to improve the readability and delivery of digital services. It was designed to support special characters and syllabics found in Indigenous Languages in B.C. When designing and building your product, ensure it has the ability to collect, store, manage and display BC Sans characters. Connect with your architects for more details and references. Working with Data is a developer focused guide around developing data solutions within BC Government. Product Lifecycle Is your team replacing, re-architecting or re-platforming an existing application? If so, it's the Product Owner's responsibility to ensure the existing application is retired and the data is transitioned or preserved to ensure data quality, accuracy and currency as well as overall portfolio sustainability. Product Owners may reach out to their assigned Ministry Portfolio Manager (MPM) for assistance with the Application Retirement process. Ensure you allocate time and budget in your backlog to manage the overall lifecycle of the business processes, data and associated products. Helpful links on Application Retirement: Hosting Options and Additional Information See: Source Code Repository Source code should be stored in a GitHub repository in the &quot;bcgov&quot; organization. Private repositories can be requested in the bcgov-c organization NRM specific guidance on Github is here: Source Code Repositories Authentication and Identity Most NRM digital products leverage the OCIO SSO service that is backed by Keycloak. https://bcgov.github.io/sso-requests https://oidc.gov.bc.ca/auth/ Secrets Management The platform services team operates a Vault service. It is described here: https://beta-docs.developer.gov.bc.ca/vault-secrets-management-service/ Access to the service is here: https://vault.developer.gov.bc.ca/ui/vault/auth?with=token Security and Privacy It's important that teams engage with the NRM Security and Privacy teams early and often. They can support you with general advice as well as Security Threat Risk Assessments (STRA's) and Privacy Impact Assessments (PIA's). NRM Security Knowledge Base: NRM Information Security Home NRM Privacy Knowledge Base: NRM Privacy Knowledge Base OWASP (Open Web Application Security Project) is another great reference for security best practices for development teams: https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/migrated_content CI/CD The deployment pipeline is a key component for your application. For visibility, collaboration and maintainability modern teams are moving away from Jenkins towards GitHub actions. It is strongly recommended that code be submitted using a Pull Request. Automated testing can and should replace manual UAT wherever practical. NRM has a modern CI/CD template using GitHub Actions and HELM: OpenShift QuickStart targeted for OpenShift Silver or Gold Cluster. NRM has a modern CI/CD template using GitHub Actions, HELM and Argo: OpenShift QuickStart Emerald targeted for OpenShift Emerald Cluster. Application Programming Interfaces (API's) We recommend adopting an &quot;API First&quot; philosophy for application development, where teams both build and consume their API's. Providing API specification with proper metadata is mandatory irrespective of the underlying implementation(REST, graphql, grpc etc..) Along with API first approach the Architecture team highly recommends looking at Domain Driven Design(DDD) where each micro-service API is bounded by its business domain(https://martinfowler.com/bliki/DomainDrivenDesign.html) Also look at Event-Driven Architecture (Event Sourcing and CQRS) when building micro-services as it promotes highly decoupled APIS, communicating over an event streaming platform (https://microservices.io/patterns/data/event-sourcing.html, https://microservices.io/patterns/data/cqrs.html) We recommend a Test Driven Development (TDD) approach to API development, as it makes the application code more reliable and efficient along with easier maintenance in the future. There are several ways to name test methods/functions but we recommend using the pattern test&lt;method_name&gt;_&lt;given_condition&gt;_&lt;expected_behavior&gt;, it makes the tests more readable, predictable and becomes living documentation of the codebase. BC Government has published a set of API Guidelines here: https://developer.gov.bc.ca/Data-and-APIs/BC-Government-API-Guidelines Information on the corporate API gateway can be found here: https://bcgov.github.io/aps-infra-platform/ Database and Data Design Most of the teams working on OpenShift are choosing a flavor of PostgreSQL to persist data for their application. Some points of consideration are: What type of data are you persisting as part of your application? Are you storing geospatial data? Audio and/or video?What are your preferred integration patterns?Do you have any requirements, for example, to replicate data to the BC Geographic Warehouse (BCGW)?What are the requirements for consistency, availability and partitioning? For NRM guidance specific to data and database design, please visit this space: NRM Data and Database Development Guidelines Database backups can be setup using the backup container image; information can be found here: https://developer.gov.bc.ca/Backup-Container Document Storage BC Government has an on premise object storage solution that delivers low cost storage for unstructured and semi-structured data. The service is billed monthly to the highwatermark of the storage your team consumes in their S3 bucket at $0.07/GB/Month. To get an S3 object storage bucket, contact the Optimize team. COMS (Common Object Management Service) is an emerging common component that leverages the object storage solution. The advantage of this component is that it includes the ability to tag and add metadata, and integrates with BC Government's standard identity providers (IDIR, BCeID). To learn more, attend the Common Services Showcase team sprint reviews or contact the team via email. An emerging companion to the Common Object Management Service being built by the Common Services team is BCBox, which is a hosted solution that uses the COMS API to allow users to upload, tag and share files using any OIDC compliant authentication mechanism. The code repository for BCBox can be found here. Design Guidance General resources for Agile designers at Digital Government (BC Visual Identity, Official BC Design System, Web Style Guide, Content Design Guidance, UX Research Guidance, Service Design Playbook) can be found here: https://digital.gov.bc.ca/resources#:~:text=Read%20the%20playbook-,For%20Designers,-B.C.%20Visual Additional design system guidance: https://developer.gov.bc.ca/Design-System/About-the-Design-System BC Parks has extended their Design Guide to include the use of the BC Sans font and other additions specific to their program: https://bcgov.github.io/bcparks/design-guides Front End Frameworks Many agile teams are using a flavor of Javascript framework for their front end development (Angular, Vue, React etc). We recommend you pick the framework that works best for the team, and if you are developing a suite of applications for your program area, harmonize across the suite where that makes sense. This will minimize risk associated with changes to the team and enable other developers to work with your code. Web Mapping Frameworks A comparison of web mapping frameworks in use in BC Government can found here: https://bcgov.github.io/bcwebmaps-options/ Back End Languages Similar to front end frameworks, we recommend you choose a development language that best suits the team and the business challenge you are working on. If you are developing a suite of applications for your program area, harmonize across the suite where that makes sense. This will minimize risk associated with changes to the team and enable other developers to work with your code. There are many languages in use by agile teams across government, the most popular being Go, Python, Java, Javascript and Typescript. The Technology Radar is a great reference to see where the momentum is around languages and frameworks. Web Domains and Certificates Information on NRM Web Domains can be found here: Web-Application domains An example of a public facing URL is https://fom.nrs.gov.bc.ca/public/projects Information on how to obtain an SSL certificate can be found here: Automation of TLS Certificates for Websites Further information on security certificates can be found here: Security Certificates Information on certbot can be found here: https://github.com/BCDevOps/certbot Common Components BC Government has a selection of mature common components and common services. Digital Government reference: https://digital.gov.bc.ca/common-components NRM Specific Guidance: Common Components and Common Services Community Tip! If you are looking for a common component you think should exist, but doesn't, consider adding some extra design thinking such that other teams can reuse your great work!​ Reporting and Analytics Many teams require reporting and analytics capabilities for their application data. Metabase is an easy-to-use open-source dashboarding and business intelligence tool that has broad usage in the NRM. Architecture has created a packaged install of Metabase tailored to teams wanting secure access to Zone B Oracle databases. Metabase I need help from the Community! There are many teams working across the NRM and beyond. To connect with your NRM colleagues, see the team directory here NRIDS Development and Digital Services The community uses Rocket.Chat to solicit help from other teams on all sorts of subjects. Users can authenticate with IDIR or their GitHub ID. https://chat.developer.gov.bc.ca/ Channels of interest might include #general #devops-alerts #devops-operations #nr-iitd-agile-teams and any channel prefixed with &quot;#nr-&quot; The NRM teams have a DevOps Guild to facilitate connections and collaboration between teams: https://apps.nrs.gov.bc.ca/int/confluence/display/DEVGUILD You can also reach out to the NRM Architecture team, who can help connect your team with the right resources. Key References: BC DevHub: https://developer.gov.bc.ca, https://docs.developer.gov.bc.ca/ Common Components: https://digital.gov.bc.ca/common-components Communities of Practice: https://digital.gov.bc.ca/communities BC Gov StackOverflow: https://stackoverflow.developer.gov.bc.ca/ FAQ Q. Do I need my application and data architecture to be formally approved? A. No, there is no formal approval process for your architecture. We recommend collaborating with the architecture team during any architectural spikes or any significant architectural decisions. Our collective experience and connectedness across the community can typically provide value for the team. Q. Do I have to use OpenShift to host my application? A. No. We would generally like new applications to be running in a containerized or serverless hosting architecture. OpenShift is a strong option for teams starting out given the maturity of the platform and the surrounding community, as is the AWS Public Cloud Service, both operated by BC Government teams. Following cloud native design principles will help ensure that your application workload is portable between hosting platforms. Q. Can I pass my application off to an ops team so the team can work on new apps? A. We generally follow the &quot;you build it, you run it&quot; philosophy, and therefore recommend you build a sustainment plan into your application roadmap. Adhering as closely as possible to the 12 Factor principles is a great way to promote a sustainable, cloud native build.","keywords":"","version":"Next"},{"title":"Participants","type":0,"sectionRef":"#","url":"/nr-architecture-patterns-library/docs/Source Code Repositories/GitHub Organization Administration","content":"Status Document Stakeholders\tNRIDS Architecture, FDS Description\tThe purpose of this page is to outline practices when managing GitHub Org Administration Outcome\tConsistent point of reference for onboarding new product teams into the NRM's. Owner\tNRIDS Architecture, FDS Participants Administrators Application Delivery Teamwith support of: 1TeamDerek RobertsOm Mishraengagement/communication specialistssecurity specialists Audience developersdesignersdevops specialistsproduct ownersinternal staff Advisors – OCIO, Jeff Card, Adam Dewey, Michelle Douville Costs NRIDS will proceed with a Github Teams License for the BCGOV-NR tenancy https://github.com/bcgov-nrNRIDS Architecture will continue to engage with OCIOs Platform Services team on their negotiations with Github Enterprise.Currently, February 2024, there are less than 30 participants in the tenancy and include developers, vendors and internal staff of Team Epsilon, 1Team, DBAs, Application Deliveries, AOT and CGI.https://github.com/pricing Components of Github Organization Administration Organization Structure &amp; Access Control​ Organization Structure - Define a clear organizational structure with teams based on projects or functions. - Assign appropriate permissions to teams and members to control access. Access Control - Regularly review and update access permissions. - Implement branch protection rules to safeguard critical branches. License Management - Clearly specify and manage licenses for each repository. - Regularly review and update licenses as needed. Repository Management​ Repositories and Branching - Create repositories for each project or component. - Establish a branching strategy (e.g., Gitflow) for a structured development process. - The authority to create BCGOV-C repos will remain with OCIO. Issue Tracking - Utilize GitHub Issues for tracking tasks, bugs, and enhancements. - Establish labeling conventions for better categorization. Backups and Recovery - Regularly back up repositories and related data. - Establish a recovery plan in case of accidental data loss or compromise. Code Review Process &amp; Security​ Code Review Process - Implement a code review process to maintain code quality. - Require reviews before merging, and use pull request templates. Security Measures - Regularly scan code for vulnerabilities using GitHub code scanning. - Implement Dependabot for automated dependency updates. Automation and CI/CD​ - Set up continuous integration and continuous deployment (CI/CD) pipelines. - Use GitHub Actions or other CI/CD tools to automate testing and deployment processes. Documentation, Collaboration &amp; Community​ Documentation - Maintain comprehensive README files for each repository. - Utilize GitHub Wiki for extensive documentation on larger projects. Collaboration and Communication - Encourage collaboration through discussion in issues and pull requests. - Use GitHub Discussions for broader conversations within the organization. Training and Onboarding - Provide training sessions for new members on GitHub workflows. - Maintain a detailed onboarding guide for new contributors. Community Guidelines - Establish and communicate community guidelines for contributors. - Enforce a code of conduct to ensure a positive and inclusive environment. Monitoring and Auditing​ - Use GitHub Insights to monitor repository activity and contributions. - Analyze metrics to identify areas for improvement in development processes. Regular Audits - Conduct periodic audits of repositories, permissions, and workflows. - Address any issues or improvements identified during audits. Ie. Script a monthly mail out to Github Team administrators to review team memberships they own. Ie. Script compliance to metadata standards (readme/pubcode) References https://stackify.com/managing-teams-github/ GitHub in BC Government - RC1.pdf https://developer.gov.bc.ca/docs/default/component/bc-developer-guide/use-github-in-bcgov","keywords":"","version":"Next"},{"title":"Removing Sensitive Data from a GitHub Repo, How To#","type":0,"sectionRef":"#","url":"/nr-architecture-patterns-library/docs/Source Code Repositories/GitHub Repository Best Practices","content":"Status GreenPublished Overview The purpose of this page is to outline practices when using GitHub as your source code repository Removing Sensitive Data from a GitHub Repo, How To# https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository Please make sure to follow those instructions carefully, as simply deleting the content will not remove it completely from the repository commit history. Repository Setup It is recommended to have product-based monorepos The below options are found under settings Branch Protection Create at least 1 branch protection rule for your &quot;main&quot; branch that; Forces an approval before merging to your &quot;main&quot; branch An approver should be someone able to understand the code changes and has the authority to approve code changes and pipeline activities associated with a PR Merge (Eg. Data Custodian and Test/Prod deployments) Note: Admins can bypass this Enforces status checks to be passed before merging, this should include; SonarCloud (vulnerability, code coverage)Code scanning (Trivy, Snyk, CodeQL)BuildsDeploymentsRoute verification (up/down, penetration testing) Note: checks need to have been run once to populate the drop-down (Ensure you select your options below when enabling the rule) Ensures branches are up to date before merging Manage Your Administrators Have at least 1 backup administratorHave as few admins as possible, most developers will not need to be an admin Manage Your Team Create a Team in GitHub and Manage the permission in the team. (https://github.com/orgs/bcgov/teams)This way if the single team is working on multiple products, authorization will be easier to manage and tracking will be easier.All team names shall be prefixed by nr- .Team names shall be suffixed by -devops if it is designed to be administrative in nature. This should only contain Product Owners/Mangers, Devops Specialists and Technical Leads . All team names shall be lowercase, and use dashes for spacing (do not use spaces or underscores, or other non-ASCII characters)Team name descriptors should attempt to preserve hierarchical team specificity where relevant.GitHub teams does not have to be nested into other existing GitHub teams; they should depend on naming convention and be top level .Team name acronyms should match formal team names where possible. Manage Your Code Owners Add a CODEOWNERS file under the /.github directoryAdd this rule to your main branch protection to ensure PRs are reviewed by code owner Setup Your Pull Request Repository Settings (Very Useful to Help Ensure Guidelines are Followed) Use squash merging to keep histories clean We recommend using pull request titles Suggest updating pull requests Being up to date is required (see above)Selecting this will add an easy update button to PRs Automatically delete head branches, which are merged feature branches Excessive numbers of branches can degrade performance and increase clone timesLong lived-branches are strongly discouraged For additional PR, Pipeline, and Deployment practices: See Create Repository Documentation Create a meaningful Readme.md, see https://github.com/bcgov/BC-Policy-Framework-For-GitHub/blob/master/BC-Gov-Org-HowTo/SAMPLE-README.mdAdd a license and other required documentation, see https://docs.developer.gov.bc.ca/required-pages-for-github-repository/Make use of the GitHub Wiki The GitHub Wiki provides version controlled documentation that multiple people can edit and does not require technical expertiseIf you're going to use the Wiki make sure you add a reference to it in your Readme.md Create a reference in confluence to your repository and documentation GitHub Wiki - Suggestions of What to Add Points of ContactHow-To's: Running LocallyDeveloper PracticesCoding PracticesTicket managementBackup and restore Application process flows Handle Your Secrets and Environment Variables See","keywords":"","version":"Next"},{"title":"Summary","type":0,"sectionRef":"#","url":"/nr-architecture-patterns-library/docs/Source Code Repositories","content":"","keywords":"","version":"Next"},{"title":"GitHub:​","type":1,"pageTitle":"Summary","url":"/nr-architecture-patterns-library/docs/Source Code Repositories#github","content":" Beginner Guide: https://github.blog/2024-05-27-what-is-git-our-beginners-guide-to-version-control/  Predominant Source Code Management(SCM) system used in BC GovernmentFree code repositories for open source projectsFree GitHub Actions for open source projectsMarketplace provides an incredible amount oftechnologies and servicesFree container registry (*within GitHub Actions) Images can be consumed by OpenShift/Kubernetes, AWS, Azure, Podman/Docker and more Biggest code repository system Highest visibility, globally and locallyLargest developer ecosystemLargest reach for talentLargest base for tooling and 3rd party app support Functions as a live resume for developersSystem for templating and starting projects quicklyContent is easily discovered by public search (e.g. Google)Open source content is readily available, login-freeVisibility encourages collaboration and discourages undesirable behaviorSensible patterns prevent code from being deployed to production, but not mergedVersatility allows teams to tailor their processes, increasing productivity  For practices on using GitHub see:  ","version":"Next","tagName":"h2"},{"title":"BitBucket:​","type":1,"pageTitle":"Summary","url":"/nr-architecture-patterns-library/docs/Source Code Repositories#bitbucket","content":" JIRA integrationConnections are stronger between teams and interal processes, e.g. RFC/RFD RFC/RFDFine-grained control, e.g.: Prevent even repo administrators from merging code or side-stepping requirementsAsphyxiate contractors with red tape until code is abandoned and/or overwritten Currently on-premise, working Jenkins and minimal firewall/networking changesPotential shift to cloud will require similar admin and network changes to GitHub  ","version":"Next","tagName":"h2"},{"title":"Subversion (SVN):​","type":1,"pageTitle":"Summary","url":"/nr-architecture-patterns-library/docs/Source Code Repositories#subversion-svn","content":" Lessened need to retrain on legacy projects, some are comfortable/familiar  Source Code Repository Naming  Github: prefix each repository with &quot;nr-&quot; e.g. nr-(app-name), replace the (app-name) with actual application/product name.e.g. nr-fom Make sure the repository name is all lowercase and separated by dashes(-)  Folder Naming  &quot;frontend&quot; folder for frontend for multiple frontends use &quot;frontend-*&quot; Example: frontend-admin &quot;backend&quot; folder for backend for multiple backends use &quot;backend-*&quot; Example: backend-doc-gen &quot;migrations&quot; folder for applications using flyway&quot;tests&quot; folder for applications with non-component specific tests (eg. Load). Component specific tests (unit, integration, e2e) should be within their specific subfolder (backend, frontend)  Diagrams  All repositories should have a .diagrams folder in the root of the repo. This folder should have at least: 1x application architecture diagram in the source file format .drawio.xml1x system integration and data flow diagram in the source file format .drawio.xml1x architecture diagram in the file format .png for each .drawio.xml diagram  Source Code Repository Topics  Topics are labels that create subject-based connections between GitHub repositories and let you explore projects by type, technology, and moreputting nrs as a topic in the repos.  Mono Repo vs Multi Repo?  As a general recommendation, it is preferred to use product based monorepos.  TL;DR - mono initially, multi with growth (e.g. +services, micro-service, APIs)In a mono repo approach, all services and codebase are kept in a single repositoryGenerally speaking, mono repos minimize dependency managementIf you have multiple services sharing the same libraries or common code, you may want to opt for a mono repo architectureIf you predict that your project will be extremely large or complex, a mono repo approach may become untenable over timeIf you have a large team with multi developers doing commits and triggering builds a mono repo approach may not suit your needsIf your project is being worked on by multiple teams (e.g. back end &amp; front end teams) you may want to opt for a multi repo architectureIf a versioning strategy is important to your project and you want to version services independently, a multi repo approach might be a better fitIf you have more than one team working in multiple repos for your project, developing patterns and best practices within your teams might be importantUptime is easier to maintain with a mult-repo approachMulti-repo allows for individual parts to be fixed/updated without taking down the serviceComplex projects and supporting architecture (pipelines, APIs, DBs) are easier to manage with multi repoImplementation (mono, multi, APIs, auth) matters far more than how the repositories are arranged  Source Code Repository License &amp; Ownership ","version":"Next","tagName":"h2"},{"title":"Java Over Oracle On-Prem JDK And Dependency version recommendations","type":0,"sectionRef":"#","url":"/nr-architecture-patterns-library/docs/Source Code Repositories/Java Over Oracle On-Prem JDK And Dependency version recommendations","content":"Java Over Oracle On-Prem JDK And Dependency version recommendations This page outlines the recommended versions of heavily used web frameworks / ORMs, each application dependencies needs to be analyzed separately for upgrades. It is RECOMMENDED to move towards Spring Boot if using spring to make dependency management easier (Spring Boot, External Tomcat Deploy). Component/Language\tMinimum Version\tIdeal Version\tLinks JDK\t17\t21 Spring Framework\t6.1\t6.2 https://spring.io/projects/spring-framework#support Struts Framework\t6.0\t6.4\thttps://cwiki.apache.org/confluence/display/WW/Migration+Guide Hibernate\t6.4.x\t6.6.x\thttps://hibernate.org/orm/documentation/migrate/ EclipseLink\t4.x\t4.x Tomcat\t9.0.90(check compatibility if using spring)\t10.1.26\thttps://tomcat.apache.org/migration.html","keywords":"","version":"Next"},{"title":"Advantages to having code in the open:","type":0,"sectionRef":"#","url":"/nr-architecture-patterns-library/docs/Source Code Repositories/Migrating Existing Source Code Repositories","content":"Status GreenPublished Overview\tThe page is intended to provide an initial checklist to guide teams in the process of migrating SVN repos to Github Advantages to having code in the open: Lower costCommunity visibility and collaborationEncourages good development practicesGithub has a suite of extra tools (such as GitHub actions)Aligns with the Digital Code of PracticeAligns with the BCGov Digital Principles - Working in the Open, Take an Ecosystem ApproachAn extensive number of tests and tools are only free for open source projects General Principles: Code (like data) should take an &quot;Open by Default&quot; position and closed by exceptionThe de-facto standard public code repository platform is GithubOn exception, the private code repository platform is Github Enterprise Under what circumstances should a code repository be Private? There are algorithms in the code that would bring harm to individuals, industry or the ProvinceInformation is hidden with intent, like state data from ArgoCD deploymentsThe presense of secrets, passwords, personal information or other sensitive data Please be aware that we provide resources and assistance in preventing this situation What do I need to do?\tHow do I do that?\tWhat tools can help? Obtain consent from the application/product owner to bring the code in the open; share this content to help inform the conversation\tIdentify the business owner of the codebase, obtain and document consent\thttps://a100.gov.bc.ca/int/irs/viewAllApps.do Ensure there is no application data in the code repository (aside from test data) Scan the code for secrets, passwords or sensitive data Trivy can perform secret scanning before and after a repo is provided publicly GitHub has built-in tools to detect accidentally adding this information Enable built in features of Github such as Dependabot to scan code and recommend remediation\tExplore the &quot;Security&quot; tab in Github Dependabot https://docs.github.com/en/code-security/dependabot Renovate https://docs.renovatebot.com/ ie - https://github.com/bcgov/nr-forests-access-management/blob/main/renovate.json Sonarcloud - ie https://sonarcloud.io/project/overview?id=forest-client-frontend Ensure the underlying codebase, dependent libraries and software versions contain no significant and exploitable vulnerabilities\tContact the security team about using FETT to scan the existing code repository Ensure that the Province of BC owns the code https://github.com/bcgov/BC-Policy-Framework-For-GitHub/blob/master/BC-Open-Source-Development-Employee-Guide/COI-Priv-IP.md Apply an open source license https://github.com/bcgov/BC-Policy-Framework-For-GitHub/blob/master/BC-Open-Source-Development-Employee-Guide/Licenses.md Choose an appropriate name for your repository\tprefix each repository with &quot;nr-&quot; e.g. nr-&lt;app-name&gt;e.g. nr-fom-api Identify at least two owners for the repository\tIdentify a product owner and a technical specialist References: https://github.com/bcgov/BC-Policy-Framework-For-GitHub/blob/master/BC-Open-Source-Development-Employee-Guide/Content-Approval-Checklist.md","keywords":"","version":"Next"},{"title":"Background","type":0,"sectionRef":"#","url":"/nr-architecture-patterns-library/docs/Vanity URL and Custom Domain - GitHub Pages","content":"","keywords":"","version":"Next"},{"title":"Step 1: Go to your domain registrar and configure DNS​","type":1,"pageTitle":"Background","url":"/nr-architecture-patterns-library/docs/Vanity URL and Custom Domain - GitHub Pages#step-1-go-to-your-domain-registrar-and-configure-dns","content":" Open a ticket NRM IT Portal - Create Domain and add DNS entry for you custom subdomain ( Sample Jira Ticket CSNR - JIRA6f96f671-5bc2-34be-9d70-11dd457b54f7SD-144223) For a subdomain (e.g., [www.example.com](http://www.example.com) or [blog.example.com](http://blog.example.com)): Add a CNAME record: makefileType: CNAME Name: www (or blog, etc.) Value: [your-username.github.io](http://your-username.github.io)  ","version":"Next","tagName":"h2"},{"title":"Step 2 : Add the subdomain for your GitHub profile​","type":1,"pageTitle":"Background","url":"/nr-architecture-patterns-library/docs/Vanity URL and Custom Domain - GitHub Pages#step-2--add-the-subdomain-for-your-github-profile","content":" Note: If you don't see the options described below, make sure you're in your Profile settings, not your repository settings. Domain verification happens at the profile level and you need to be org owner.  In the upper-right corner of any page on GitHub, click your profile photo, then click Settings. In the &quot;Code, planning, and automation&quot; section of the sidebar, click Pages. On the right, click Add a domain. Under &quot;What domain would you like to add?,&quot; enter the domain you wish to verify and select Add domain.  ","version":"Next","tagName":"h2"},{"title":"Step 3 : Add DNS TXT record​","type":1,"pageTitle":"Background","url":"/nr-architecture-patterns-library/docs/Vanity URL and Custom Domain - GitHub Pages#step-3--add-dns-txt-record","content":" Follow the instructions under &quot;Add a DNS TXT record&quot; to create the TXT record with your domain hosting service. Wait for your DNS configuration to change, this may be immediate or take up to 24 hours. You can confirm the change to your DNS configuration by running the dig command on the command line. In the command below, replace USERNAME with your username and [example.com](http://example.com) with the domain you're verifying. If your DNS configuration has updated, you should see your new TXT record in the output.  ","version":"Next","tagName":"h2"},{"title":"Step 3 : Verify the DNS changes​","type":1,"pageTitle":"Background","url":"/nr-architecture-patterns-library/docs/Vanity URL and Custom Domain - GitHub Pages#step-3--verify-the-dns-changes","content":" After confirming that your DNS configuration has updated, you can verify the domain. If the change wasn't immediate, and you have navigated away from the previous page, return to your Pages settings by following the first few steps and, to the right of the domain, click and then click Continue verifying. To verify your domain, click Verify. To make sure your custom domain remains verified, keep the TXT record in your domain's DNS configuration.  ","version":"Next","tagName":"h2"},{"title":"Step 4 : Update the GitHub Pages​","type":1,"pageTitle":"Background","url":"/nr-architecture-patterns-library/docs/Vanity URL and Custom Domain - GitHub Pages#step-4--update-the-github-pages","content":" After verifying your DNS configuration and custom domain its time to update your GitHub Pages to point to the right address.Go to general settings of your GithHub pages and in the Pages section update the Custom domain.Click on Save and once DNS check is successful your website is live with new domain ","version":"Next","tagName":"h2"}],"options":{"enableHighlight":true,"id":"default"}}